{"ast":null,"code":"const baseUrl = \"https://auth.nomoreparties.co\";\n\n// Функция для проверки успешности ответа от сервера\nconst checkRes = res => {\n  if (res.ok) {\n    return res.json();\n  }\n  return Promise.reject(`Ошибка: ${res.status} ${res.statusText}`);\n};\n\n// Регистрация нового пользователя\nexport const register = (password, email) => {\n  return fetch(`${baseUrl}/signup`, {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      password,\n      email\n    })\n  }).then(res => checkRes(res));\n};\n\n// Авторизация пользователя\nexport const authorize = (password, email) => {\n  return fetch(`${baseUrl}/signin`, {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      password,\n      email\n    })\n  }).then(res => checkRes(res));\n};\n\n// Проверка валидности токена и получение информации о пользователе\nexport const getContent = token => {\n  return fetch(`${baseUrl}/users/me`, {\n    method: \"GET\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${token}`\n    }\n  }).then(res => checkRes(res));\n};","map":{"version":3,"names":["baseUrl","checkRes","res","ok","json","Promise","reject","status","statusText","register","password","email","fetch","method","headers","Accept","body","JSON","stringify","then","authorize","getContent","token","Authorization"],"sources":["C:/Users/Mihail/dev/react-mesto-api-full-gha/frontend/src/utils/auth.js"],"sourcesContent":["const baseUrl = \"https://auth.nomoreparties.co\";\r\n\r\n// Функция для проверки успешности ответа от сервера\r\nconst checkRes = (res) => {\r\n  if (res.ok) {\r\n    return res.json();\r\n  }\r\n\r\n  return Promise.reject(`Ошибка: ${res.status} ${res.statusText}`);\r\n}\r\n\r\n// Регистрация нового пользователя\r\nexport const register = (password, email) => {\r\n  return fetch(`${baseUrl}/signup`, {\r\n    method: \"POST\",\r\n    headers: {\r\n      Accept: \"application/json\",\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify({ password, email }),\r\n  }).then((res) => checkRes(res));\r\n};\r\n\r\n// Авторизация пользователя\r\nexport const authorize = (password, email) => {\r\n  return fetch(`${baseUrl}/signin`, {\r\n    method: \"POST\",\r\n    headers: {\r\n      Accept: \"application/json\",\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify({ password, email }),\r\n  }).then((res) => checkRes(res));\r\n};\r\n\r\n// Проверка валидности токена и получение информации о пользователе\r\nexport const getContent = (token) => {\r\n  return fetch(`${baseUrl}/users/me`, {\r\n    method: \"GET\",\r\n    headers: {\r\n      Accept: \"application/json\",\r\n      \"Content-Type\": \"application/json\",\r\n      Authorization: `Bearer ${token}`,\r\n    },\r\n  }).then((res) => checkRes(res));\r\n};"],"mappings":"AAAA,MAAMA,OAAO,GAAG,+BAA+B;;AAE/C;AACA,MAAMC,QAAQ,GAAIC,GAAG,IAAK;EACxB,IAAIA,GAAG,CAACC,EAAE,EAAE;IACV,OAAOD,GAAG,CAACE,IAAI,CAAC,CAAC;EACnB;EAEA,OAAOC,OAAO,CAACC,MAAM,CAAE,WAAUJ,GAAG,CAACK,MAAO,IAAGL,GAAG,CAACM,UAAW,EAAC,CAAC;AAClE,CAAC;;AAED;AACA,OAAO,MAAMC,QAAQ,GAAGA,CAACC,QAAQ,EAAEC,KAAK,KAAK;EAC3C,OAAOC,KAAK,CAAE,GAAEZ,OAAQ,SAAQ,EAAE;IAChCa,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACPC,MAAM,EAAE,kBAAkB;MAC1B,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAER,QAAQ;MAAEC;IAAM,CAAC;EAC1C,CAAC,CAAC,CAACQ,IAAI,CAAEjB,GAAG,IAAKD,QAAQ,CAACC,GAAG,CAAC,CAAC;AACjC,CAAC;;AAED;AACA,OAAO,MAAMkB,SAAS,GAAGA,CAACV,QAAQ,EAAEC,KAAK,KAAK;EAC5C,OAAOC,KAAK,CAAE,GAAEZ,OAAQ,SAAQ,EAAE;IAChCa,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACPC,MAAM,EAAE,kBAAkB;MAC1B,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAER,QAAQ;MAAEC;IAAM,CAAC;EAC1C,CAAC,CAAC,CAACQ,IAAI,CAAEjB,GAAG,IAAKD,QAAQ,CAACC,GAAG,CAAC,CAAC;AACjC,CAAC;;AAED;AACA,OAAO,MAAMmB,UAAU,GAAIC,KAAK,IAAK;EACnC,OAAOV,KAAK,CAAE,GAAEZ,OAAQ,WAAU,EAAE;IAClCa,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE;MACPC,MAAM,EAAE,kBAAkB;MAC1B,cAAc,EAAE,kBAAkB;MAClCQ,aAAa,EAAG,UAASD,KAAM;IACjC;EACF,CAAC,CAAC,CAACH,IAAI,CAAEjB,GAAG,IAAKD,QAAQ,CAACC,GAAG,CAAC,CAAC;AACjC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}