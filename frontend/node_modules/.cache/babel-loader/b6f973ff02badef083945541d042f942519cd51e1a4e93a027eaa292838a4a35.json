{"ast":null,"code":"// const baseUrl = \"https://auth.nomoreparties.co\";\nconst baseUrl=\"http://localhost:3000\";// Функция для проверки успешности ответа от сервера\nconst checkRes=res=>{if(res.ok){return res.json();}return Promise.reject(\"\\u041E\\u0448\\u0438\\u0431\\u043A\\u0430: \".concat(res.status,\" \").concat(res.statusText));};// Регистрация нового пользователя\nexport const register=(password,email)=>{return fetch(\"\".concat(baseUrl,\"/signup\"),{method:\"POST\",headers:{Accept:\"application/json\",\"Content-Type\":\"application/json\"},body:JSON.stringify({password,email})}).then(res=>checkRes(res));};// Авторизация пользователя\nexport const authorize=(password,email)=>{return fetch(\"\".concat(baseUrl,\"/signin\"),{method:\"POST\",headers:{Accept:\"application/json\",\"Content-Type\":\"application/json\"},body:JSON.stringify({password,email})}).then(res=>checkRes(res));};// Проверка валидности токена и получение информации о пользователе\nexport const getContent=token=>{return fetch(\"\".concat(baseUrl,\"/users/me\"),{method:\"GET\",headers:{Accept:\"application/json\",\"Content-Type\":\"application/json\",Authorization:\"Bearer \".concat(token)}}).then(res=>checkRes(res));};","map":{"version":3,"names":["baseUrl","checkRes","res","ok","json","Promise","reject","concat","status","statusText","register","password","email","fetch","method","headers","Accept","body","JSON","stringify","then","authorize","getContent","token","Authorization"],"sources":["C:/Users/Mihail/dev/react-mesto-api-full-gha/frontend/src/utils/auth.js"],"sourcesContent":["// const baseUrl = \"https://auth.nomoreparties.co\";\r\nconst baseUrl = \"http://localhost:3000\";\r\n\r\n\r\n// Функция для проверки успешности ответа от сервера\r\nconst checkRes = (res) => {\r\n  if (res.ok) {\r\n    return res.json();\r\n  }\r\n\r\n  return Promise.reject(`Ошибка: ${res.status} ${res.statusText}`);\r\n}\r\n\r\n// Регистрация нового пользователя\r\nexport const register = (password, email) => {\r\n  return fetch(`${baseUrl}/signup`, {\r\n    method: \"POST\",\r\n    headers: {\r\n      Accept: \"application/json\",\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify({ password, email }),\r\n  }).then((res) => checkRes(res));\r\n};\r\n\r\n// Авторизация пользователя\r\nexport const authorize = (password, email) => {\r\n  return fetch(`${baseUrl}/signin`, {\r\n    method: \"POST\",\r\n    headers: {\r\n      Accept: \"application/json\",\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify({ password, email }),\r\n  }).then((res) => checkRes(res));\r\n};\r\n\r\n// Проверка валидности токена и получение информации о пользователе\r\nexport const getContent = (token) => {\r\n  return fetch(`${baseUrl}/users/me`, {\r\n    method: \"GET\",\r\n    headers: {\r\n      Accept: \"application/json\",\r\n      \"Content-Type\": \"application/json\",\r\n      Authorization: `Bearer ${token}`,\r\n    },\r\n  }).then((res) => checkRes(res));\r\n};"],"mappings":"AAAA;AACA,KAAM,CAAAA,OAAO,CAAG,uBAAuB,CAGvC;AACA,KAAM,CAAAC,QAAQ,CAAIC,GAAG,EAAK,CACxB,GAAIA,GAAG,CAACC,EAAE,CAAE,CACV,MAAO,CAAAD,GAAG,CAACE,IAAI,CAAC,CAAC,CACnB,CAEA,MAAO,CAAAC,OAAO,CAACC,MAAM,0CAAAC,MAAA,CAAYL,GAAG,CAACM,MAAM,MAAAD,MAAA,CAAIL,GAAG,CAACO,UAAU,CAAE,CAAC,CAClE,CAAC,CAED;AACA,MAAO,MAAM,CAAAC,QAAQ,CAAGA,CAACC,QAAQ,CAAEC,KAAK,GAAK,CAC3C,MAAO,CAAAC,KAAK,IAAAN,MAAA,CAAIP,OAAO,YAAW,CAChCc,MAAM,CAAE,MAAM,CACdC,OAAO,CAAE,CACPC,MAAM,CAAE,kBAAkB,CAC1B,cAAc,CAAE,kBAClB,CAAC,CACDC,IAAI,CAAEC,IAAI,CAACC,SAAS,CAAC,CAAER,QAAQ,CAAEC,KAAM,CAAC,CAC1C,CAAC,CAAC,CAACQ,IAAI,CAAElB,GAAG,EAAKD,QAAQ,CAACC,GAAG,CAAC,CAAC,CACjC,CAAC,CAED;AACA,MAAO,MAAM,CAAAmB,SAAS,CAAGA,CAACV,QAAQ,CAAEC,KAAK,GAAK,CAC5C,MAAO,CAAAC,KAAK,IAAAN,MAAA,CAAIP,OAAO,YAAW,CAChCc,MAAM,CAAE,MAAM,CACdC,OAAO,CAAE,CACPC,MAAM,CAAE,kBAAkB,CAC1B,cAAc,CAAE,kBAClB,CAAC,CACDC,IAAI,CAAEC,IAAI,CAACC,SAAS,CAAC,CAAER,QAAQ,CAAEC,KAAM,CAAC,CAC1C,CAAC,CAAC,CAACQ,IAAI,CAAElB,GAAG,EAAKD,QAAQ,CAACC,GAAG,CAAC,CAAC,CACjC,CAAC,CAED;AACA,MAAO,MAAM,CAAAoB,UAAU,CAAIC,KAAK,EAAK,CACnC,MAAO,CAAAV,KAAK,IAAAN,MAAA,CAAIP,OAAO,cAAa,CAClCc,MAAM,CAAE,KAAK,CACbC,OAAO,CAAE,CACPC,MAAM,CAAE,kBAAkB,CAC1B,cAAc,CAAE,kBAAkB,CAClCQ,aAAa,WAAAjB,MAAA,CAAYgB,KAAK,CAChC,CACF,CAAC,CAAC,CAACH,IAAI,CAAElB,GAAG,EAAKD,QAAQ,CAACC,GAAG,CAAC,CAAC,CACjC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}