{"ast":null,"code":"import{useCallback,useState}from\"react\";export default function useFormValidate(){// Состояние для хранения введенных значений полей формы\nconst[formValues,setFormValues]=useState({});// Состояние для хранения ошибок валидации полей формы\nconst[errors,setErrors]=useState({});// Состояние для хранения общей валидности формы\nconst[isFormValid,setIsFormValid]=useState(false);// Состояние для хранения информации о валидности каждого поля ввода\nconst[isInputValid,setIsInputValid]=useState({});//console.log(isFormValid)\nfunction handleChange(evt){const{name,value,validationMessage,validity,form}=evt.target;setFormValues(prevFormValues=>({...prevFormValues,[name]:value}));setErrors(prevErrors=>({...prevErrors,[name]:validationMessage}));setIsInputValid(prevIsInputValid=>({...prevIsInputValid,[name]:validity.valid}));setIsFormValid(form.checkValidity());}function resetForm(){let data=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};setFormValues(data);setErrors({});setIsFormValid(false);setIsInputValid({});}const setInitialValue=useCallback((name,value)=>{setFormValues(prevFormValues=>({...prevFormValues,[name]:value}));},[]);return{formValues,errors,isFormValid,isInputValid,handleChange,resetForm,setInitialValue};}// import { useCallback, useState } from \"react\"\n// export default function useFormValidate() {\n//   // Состояние для хранения введенных значений полей формы\n//   const [formValues, setFormValues] = useState({});\n//    // Состояние для хранения ошибок валидации полей формы\n//   const [errors, setErrors] = useState({});\n//      // Состояние для хранения общей валидности формы\n//   const [isFormValid, setIsFormValid] = useState(false);\n//  // Состояние для хранения информации о валидности каждого поля ввода\n//   const [isInputValid, setIsInputValid] = useState({});\n// //console.log(isFormValid)\n//   function handleChange(evt) {\n//     const name = evt.target.name\n//     const value = evt.target.value\n//     const validationMessage = evt.target.validationMessage\n//     const valid = evt.target.validity.valid\n//     const form = evt.target.form\n//     setFormValues((formValues) => {\n//       return {...formValues, [name]: value}\n//     })\n//     setErrors((errors) => {\n//       return {...errors, [name]: validationMessage}\n//     })\n//     setIsInputValid((isInputValid) => {\n//       return {...isInputValid, [name]: valid}\n//     })\n//     setIsFormValid(form.checkValidity())\n//     //console.log(valid)\n//   }\n//   function resetForm(data={}) {\n//     setFormValues(data)\n//     setErrors({})\n//     setIsFormValid(false)\n//     setIsInputValid({})\n//   }\n//   const setInitialValue = useCallback ((name, value) => {\n//     setFormValues((formValues) => {\n//       return {...formValues, [name]: value}\n//     })\n//   }, [])\n//   return {\n//     formValues,\n//     errors,\n//     isFormValid,\n//     isInputValid,\n//     handleChange,\n//     resetForm,\n//     setInitialValue\n//   }\n// }","map":{"version":3,"names":["useCallback","useState","useFormValidate","formValues","setFormValues","errors","setErrors","isFormValid","setIsFormValid","isInputValid","setIsInputValid","handleChange","evt","name","value","validationMessage","validity","form","target","prevFormValues","prevErrors","prevIsInputValid","valid","checkValidity","resetForm","data","arguments","length","undefined","setInitialValue"],"sources":["C:/Users/Mihail/dev/react-mesto-api-full-gha/frontend/src/utils/hooks/useFormValidate.js"],"sourcesContent":["import { useCallback, useState } from \"react\";\r\n\r\nexport default function useFormValidate() {\r\n  // Состояние для хранения введенных значений полей формы\r\n  const [formValues, setFormValues] = useState({});\r\n  // Состояние для хранения ошибок валидации полей формы\r\n  const [errors, setErrors] = useState({});\r\n  // Состояние для хранения общей валидности формы\r\n  const [isFormValid, setIsFormValid] = useState(false);\r\n  // Состояние для хранения информации о валидности каждого поля ввода\r\n  const [isInputValid, setIsInputValid] = useState({});\r\n\r\n  //console.log(isFormValid)\r\n\r\n  function handleChange(evt) {\r\n    const { name, value, validationMessage, validity, form } = evt.target;\r\n\r\n    setFormValues((prevFormValues) => ({ ...prevFormValues, [name]: value }));\r\n    setErrors((prevErrors) => ({ ...prevErrors, [name]: validationMessage }));\r\n    setIsInputValid((prevIsInputValid) => ({\r\n      ...prevIsInputValid,\r\n      [name]: validity.valid,\r\n    }));\r\n    setIsFormValid(form.checkValidity());\r\n  }\r\n\r\n  function resetForm(data = {}) {\r\n    setFormValues(data);\r\n    setErrors({});\r\n    setIsFormValid(false);\r\n    setIsInputValid({});\r\n  }\r\n\r\n  const setInitialValue = useCallback((name, value) => {\r\n    setFormValues((prevFormValues) => ({ ...prevFormValues, [name]: value }));\r\n  }, []);\r\n\r\n  return {\r\n    formValues,\r\n    errors,\r\n    isFormValid,\r\n    isInputValid,\r\n    handleChange,\r\n    resetForm,\r\n    setInitialValue,\r\n  };\r\n}\r\n\r\n// import { useCallback, useState } from \"react\"\r\n\r\n// export default function useFormValidate() {\r\n//   // Состояние для хранения введенных значений полей формы\r\n//   const [formValues, setFormValues] = useState({});\r\n//    // Состояние для хранения ошибок валидации полей формы\r\n//   const [errors, setErrors] = useState({});\r\n//      // Состояние для хранения общей валидности формы\r\n//   const [isFormValid, setIsFormValid] = useState(false);\r\n//  // Состояние для хранения информации о валидности каждого поля ввода\r\n//   const [isInputValid, setIsInputValid] = useState({});\r\n\r\n// //console.log(isFormValid)\r\n\r\n//   function handleChange(evt) {\r\n\r\n//     const name = evt.target.name\r\n//     const value = evt.target.value\r\n//     const validationMessage = evt.target.validationMessage\r\n//     const valid = evt.target.validity.valid\r\n//     const form = evt.target.form\r\n\r\n//     setFormValues((formValues) => {\r\n//       return {...formValues, [name]: value}\r\n//     })\r\n\r\n//     setErrors((errors) => {\r\n//       return {...errors, [name]: validationMessage}\r\n//     })\r\n\r\n//     setIsInputValid((isInputValid) => {\r\n//       return {...isInputValid, [name]: valid}\r\n//     })\r\n\r\n//     setIsFormValid(form.checkValidity())\r\n\r\n//     //console.log(valid)\r\n\r\n//   }\r\n\r\n//   function resetForm(data={}) {\r\n//     setFormValues(data)\r\n//     setErrors({})\r\n//     setIsFormValid(false)\r\n//     setIsInputValid({})\r\n\r\n//   }\r\n\r\n//   const setInitialValue = useCallback ((name, value) => {\r\n//     setFormValues((formValues) => {\r\n//       return {...formValues, [name]: value}\r\n//     })\r\n\r\n//   }, [])\r\n\r\n//   return {\r\n//     formValues,\r\n//     errors,\r\n//     isFormValid,\r\n//     isInputValid,\r\n//     handleChange,\r\n//     resetForm,\r\n//     setInitialValue\r\n//   }\r\n\r\n// }\r\n"],"mappings":"AAAA,OAASA,WAAW,CAAEC,QAAQ,KAAQ,OAAO,CAE7C,cAAe,SAAS,CAAAC,eAAeA,CAAA,CAAG,CACxC;AACA,KAAM,CAACC,UAAU,CAAEC,aAAa,CAAC,CAAGH,QAAQ,CAAC,CAAC,CAAC,CAAC,CAChD;AACA,KAAM,CAACI,MAAM,CAAEC,SAAS,CAAC,CAAGL,QAAQ,CAAC,CAAC,CAAC,CAAC,CACxC;AACA,KAAM,CAACM,WAAW,CAAEC,cAAc,CAAC,CAAGP,QAAQ,CAAC,KAAK,CAAC,CACrD;AACA,KAAM,CAACQ,YAAY,CAAEC,eAAe,CAAC,CAAGT,QAAQ,CAAC,CAAC,CAAC,CAAC,CAEpD;AAEA,QAAS,CAAAU,YAAYA,CAACC,GAAG,CAAE,CACzB,KAAM,CAAEC,IAAI,CAAEC,KAAK,CAAEC,iBAAiB,CAAEC,QAAQ,CAAEC,IAAK,CAAC,CAAGL,GAAG,CAACM,MAAM,CAErEd,aAAa,CAAEe,cAAc,GAAM,CAAE,GAAGA,cAAc,CAAE,CAACN,IAAI,EAAGC,KAAM,CAAC,CAAC,CAAC,CACzER,SAAS,CAAEc,UAAU,GAAM,CAAE,GAAGA,UAAU,CAAE,CAACP,IAAI,EAAGE,iBAAkB,CAAC,CAAC,CAAC,CACzEL,eAAe,CAAEW,gBAAgB,GAAM,CACrC,GAAGA,gBAAgB,CACnB,CAACR,IAAI,EAAGG,QAAQ,CAACM,KACnB,CAAC,CAAC,CAAC,CACHd,cAAc,CAACS,IAAI,CAACM,aAAa,CAAC,CAAC,CAAC,CACtC,CAEA,QAAS,CAAAC,SAASA,CAAA,CAAY,IAAX,CAAAC,IAAI,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,CAAC,CAAC,CAC1BtB,aAAa,CAACqB,IAAI,CAAC,CACnBnB,SAAS,CAAC,CAAC,CAAC,CAAC,CACbE,cAAc,CAAC,KAAK,CAAC,CACrBE,eAAe,CAAC,CAAC,CAAC,CAAC,CACrB,CAEA,KAAM,CAAAmB,eAAe,CAAG7B,WAAW,CAAC,CAACa,IAAI,CAAEC,KAAK,GAAK,CACnDV,aAAa,CAAEe,cAAc,GAAM,CAAE,GAAGA,cAAc,CAAE,CAACN,IAAI,EAAGC,KAAM,CAAC,CAAC,CAAC,CAC3E,CAAC,CAAE,EAAE,CAAC,CAEN,MAAO,CACLX,UAAU,CACVE,MAAM,CACNE,WAAW,CACXE,YAAY,CACZE,YAAY,CACZa,SAAS,CACTK,eACF,CAAC,CACH,CAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}