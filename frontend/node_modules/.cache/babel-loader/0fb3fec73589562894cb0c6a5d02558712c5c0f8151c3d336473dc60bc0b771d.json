{"ast":null,"code":"class Api {\n  constructor(options) {\n    this._baseUrl = options.baseUrl;\n    this._headers = options.headers;\n  }\n\n  //Проверяет ответ от сервера на предмет успешности запроса.\n  _checkRes(res) {\n    if (res.ok) {\n      return res.json();\n    }\n    // если ошибка, отклоняем промис\n    return Promise.reject(`Ошибка: ${res.status}`);\n  }\n\n  // Выполняет сетевой запрос с использованием fetch и проверяет ответ с помощью _checkResponse.\n  // Возвращает результат запроса в виде промиса\n  _request(baseUrl, options) {\n    return fetch(baseUrl, options).then(this._checkRes);\n  }\n\n  //Метод запроса информации о пользователе\n  getUserInfo(token) {\n    return this._request(`${this._baseUrl}/users/me`, {\n      headers: {\n        ...this._headers,\n        //?\n        Authorization: `Bearer ${token}`\n      }\n    });\n  }\n\n  // Метод запроса информации о пользователе\n  getInitialCards(token) {\n    return this._request(`${this._baseUrl}/cards`, {\n      headers: {\n        ...this._headers,\n        Authorization: `Bearer ${token}`\n      }\n    });\n  }\n\n  // Метод отправки информации о пользователе\n  sendUserInfo(userData, token) {\n    return this._request(`${this._baseUrl}/users/me`, {\n      method: \"PATCH\",\n      headers: {\n        ...this._headers,\n        Authorization: `Bearer ${token}`\n      },\n      body: JSON.stringify({\n        name: userData.username,\n        about: userData.job\n      })\n    });\n  }\n\n  // Метод установки аватара профиля\n  setUserAvatar(avatarData) {\n    return this._request(`${this._baseUrl}/users/me/avatar`, {\n      method: \"PATCH\",\n      headers: this._headers,\n      body: JSON.stringify({\n        avatar: avatarData.avatar\n      })\n    });\n  }\n\n  // Метод добавления новой карточки\n  sendNewCardInfo(cardData) {\n    return this._request(`${this._baseUrl}/cards`, {\n      method: \"POST\",\n      headers: this._headers,\n      body: JSON.stringify({\n        name: cardData.name,\n        link: cardData.link\n      })\n    });\n  }\n\n  // Метод удаления карточки\n  deleteCard(cardId) {\n    return this._request(`${this._baseUrl}/cards/${cardId}`, {\n      method: \"DELETE\",\n      headers: this._headers\n    });\n  }\n\n  // // Метод установки лайков\n  // setCardLike(cardId) {\n  //   return this._request(`${this._baseUrl}/cards/${cardId}/likes`, {\n  //     method: \"PUT\",\n  //     headers: this._headers,\n  //   });\n  // }\n\n  // // Метод удаления лайка карточки\n  // deleteCardLike(cardId) {\n  //   return this._request(`${this._baseUrl}/cards/${cardId}/likes`, {\n  //     method: \"DELETE\",\n  //     headers: this._headers,\n  //   });\n  // }\n\n  changeLikeCardStatus(cardId, isLiked) {\n    return this._request(`${this._baseUrl}/cards/${cardId}/likes`, {\n      method: `${!isLiked ? \"DELETE\" : \"PUT\"}`,\n      headers: this._headers\n    });\n  }\n}\n\n// Создание экземпляра класса\n// const api = new Api({\n//   baseUrl: \"https://mesto.nomoreparties.co/v1/cohort-77\",\n//   headers: {\n//     authorization: \"3edcdea5-b130-42c1-9a7c-9c803e968261\",\n//     \"Content-Type\": \"application/json\",\n//   },\n// });\n\nconst api = new Api({\n  baseUrl: \"http://localhost:3000\",\n  headers: {\n    \"Content-Type\": \"application/json\"\n  }\n});\nexport default api;","map":{"version":3,"names":["Api","constructor","options","_baseUrl","baseUrl","_headers","headers","_checkRes","res","ok","json","Promise","reject","status","_request","fetch","then","getUserInfo","token","Authorization","getInitialCards","sendUserInfo","userData","method","body","JSON","stringify","name","username","about","job","setUserAvatar","avatarData","avatar","sendNewCardInfo","cardData","link","deleteCard","cardId","changeLikeCardStatus","isLiked","api"],"sources":["C:/Users/Mihail/dev/react-mesto-api-full-gha/frontend/src/utils/api.js"],"sourcesContent":["class Api {\r\n  constructor(options) {\r\n    this._baseUrl = options.baseUrl;\r\n    this._headers = options.headers;\r\n  }\r\n\r\n  //Проверяет ответ от сервера на предмет успешности запроса.\r\n  _checkRes(res) {\r\n    if (res.ok) {\r\n      return res.json();\r\n    }\r\n    // если ошибка, отклоняем промис\r\n    return Promise.reject(`Ошибка: ${res.status}`);\r\n  }\r\n\r\n  // Выполняет сетевой запрос с использованием fetch и проверяет ответ с помощью _checkResponse.\r\n  // Возвращает результат запроса в виде промиса\r\n  _request(baseUrl, options) {\r\n    return fetch(baseUrl, options).then(this._checkRes);\r\n  }\r\n\r\n  //Метод запроса информации о пользователе\r\n  getUserInfo(token) {\r\n    return this._request(`${this._baseUrl}/users/me`, {\r\n      headers: {\r\n        ...this._headers, //?\r\n        Authorization: `Bearer ${token}`\r\n      }\r\n    });\r\n  }\r\n\r\n  \r\n  // Метод запроса информации о пользователе\r\n  getInitialCards(token) {\r\n    return this._request(`${this._baseUrl}/cards`, {\r\n      headers: {\r\n        ...this._headers,\r\n        Authorization: `Bearer ${token}`\r\n      }\r\n    });\r\n  }\r\n\r\n  // Метод отправки информации о пользователе\r\n  sendUserInfo(userData, token) {\r\n    return this._request(`${this._baseUrl}/users/me`, {\r\n      method: \"PATCH\",\r\n      headers: {\r\n        ...this._headers,\r\n        Authorization: `Bearer ${token}`\r\n      },\r\n      body: JSON.stringify({\r\n        name: userData.username,\r\n        about: userData.job,\r\n      }),\r\n    });\r\n  }\r\n\r\n  // Метод установки аватара профиля\r\n  setUserAvatar(avatarData) {\r\n    return this._request(`${this._baseUrl}/users/me/avatar`, {\r\n      method: \"PATCH\",\r\n      headers: this._headers,\r\n      body: JSON.stringify({\r\n        avatar: avatarData.avatar,\r\n      }),\r\n    });\r\n  }\r\n\r\n  // Метод добавления новой карточки\r\n  sendNewCardInfo(cardData) {\r\n    return this._request(`${this._baseUrl}/cards`, {\r\n      method: \"POST\",\r\n      headers: this._headers,\r\n      body: JSON.stringify({\r\n        name: cardData.name,\r\n        link: cardData.link,\r\n      }),\r\n    });\r\n  }\r\n\r\n  // Метод удаления карточки\r\n  deleteCard(cardId) {\r\n    return this._request(`${this._baseUrl}/cards/${cardId}`, {\r\n      method: \"DELETE\",\r\n      headers: this._headers,\r\n    });\r\n  }\r\n\r\n  // // Метод установки лайков\r\n  // setCardLike(cardId) {\r\n  //   return this._request(`${this._baseUrl}/cards/${cardId}/likes`, {\r\n  //     method: \"PUT\",\r\n  //     headers: this._headers,\r\n  //   });\r\n  // }\r\n\r\n  // // Метод удаления лайка карточки\r\n  // deleteCardLike(cardId) {\r\n  //   return this._request(`${this._baseUrl}/cards/${cardId}/likes`, {\r\n  //     method: \"DELETE\",\r\n  //     headers: this._headers,\r\n  //   });\r\n  // }\r\n\r\n  changeLikeCardStatus(cardId, isLiked) {\r\n    return this._request(`${this._baseUrl}/cards/${cardId}/likes`, {\r\n      method: `${!isLiked ? \"DELETE\" : \"PUT\"}`,\r\n      headers: this._headers,\r\n    });\r\n  }\r\n}\r\n\r\n// Создание экземпляра класса\r\n// const api = new Api({\r\n//   baseUrl: \"https://mesto.nomoreparties.co/v1/cohort-77\",\r\n//   headers: {\r\n//     authorization: \"3edcdea5-b130-42c1-9a7c-9c803e968261\",\r\n//     \"Content-Type\": \"application/json\",\r\n//   },\r\n// });\r\n\r\nconst api = new Api({\r\n  baseUrl: \"http://localhost:3000\",\r\n  headers: {\r\n    \"Content-Type\": \"application/json\",\r\n  },\r\n});\r\n\r\n\r\nexport default api;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}