{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useCallback, useState } from \"react\";\nexport default function useFormValidate() {\n  _s();\n  // Состояние для хранения введенных значений полей формы\n  const [formValues, setFormValues] = useState({});\n  // Состояние для хранения ошибок валидации полей формы\n  const [errors, setErrors] = useState({});\n  // Состояние для хранения общей валидности формы\n  const [isFormValid, setIsFormValid] = useState(false);\n  // Состояние для хранения информации о валидности каждого поля ввода\n  const [isInputValid, setIsInputValid] = useState({});\n\n  //console.log(isFormValid)\n\n  function handleChange(evt) {\n    const {\n      name,\n      value,\n      validationMessage,\n      validity,\n      form\n    } = evt.target;\n    setFormValues(prevFormValues => ({\n      ...prevFormValues,\n      [name]: value\n    }));\n    setErrors(prevErrors => ({\n      ...prevErrors,\n      [name]: validationMessage\n    }));\n    setIsInputValid(prevIsInputValid => ({\n      ...prevIsInputValid,\n      [name]: validity.valid\n    }));\n    setIsFormValid(form.checkValidity());\n  }\n  function resetForm(data = {}) {\n    setFormValues(data);\n    setErrors({});\n    setIsFormValid(false);\n    setIsInputValid({});\n  }\n  const setInitialValue = useCallback((name, value) => {\n    setFormValues(prevFormValues => ({\n      ...prevFormValues,\n      [name]: value\n    }));\n  }, []);\n  return {\n    formValues,\n    errors,\n    isFormValid,\n    isInputValid,\n    handleChange,\n    resetForm,\n    setInitialValue\n  };\n}\n\n// import { useCallback, useState } from \"react\"\n\n// export default function useFormValidate() {\n//   // Состояние для хранения введенных значений полей формы\n//   const [formValues, setFormValues] = useState({});\n//    // Состояние для хранения ошибок валидации полей формы\n//   const [errors, setErrors] = useState({});\n//      // Состояние для хранения общей валидности формы\n//   const [isFormValid, setIsFormValid] = useState(false);\n//  // Состояние для хранения информации о валидности каждого поля ввода\n//   const [isInputValid, setIsInputValid] = useState({});\n\n// //console.log(isFormValid)\n\n//   function handleChange(evt) {\n\n//     const name = evt.target.name\n//     const value = evt.target.value\n//     const validationMessage = evt.target.validationMessage\n//     const valid = evt.target.validity.valid\n//     const form = evt.target.form\n\n//     setFormValues((formValues) => {\n//       return {...formValues, [name]: value}\n//     })\n\n//     setErrors((errors) => {\n//       return {...errors, [name]: validationMessage}\n//     })\n\n//     setIsInputValid((isInputValid) => {\n//       return {...isInputValid, [name]: valid}\n//     })\n\n//     setIsFormValid(form.checkValidity())\n\n//     //console.log(valid)\n\n//   }\n\n//   function resetForm(data={}) {\n//     setFormValues(data)\n//     setErrors({})\n//     setIsFormValid(false)\n//     setIsInputValid({})\n\n//   }\n\n//   const setInitialValue = useCallback ((name, value) => {\n//     setFormValues((formValues) => {\n//       return {...formValues, [name]: value}\n//     })\n\n//   }, [])\n\n//   return {\n//     formValues,\n//     errors,\n//     isFormValid,\n//     isInputValid,\n//     handleChange,\n//     resetForm,\n//     setInitialValue\n//   }\n\n// }\n_s(useFormValidate, \"z6n0Uis9ir4TPPVifmetltfLLpE=\");","map":{"version":3,"names":["useCallback","useState","useFormValidate","_s","formValues","setFormValues","errors","setErrors","isFormValid","setIsFormValid","isInputValid","setIsInputValid","handleChange","evt","name","value","validationMessage","validity","form","target","prevFormValues","prevErrors","prevIsInputValid","valid","checkValidity","resetForm","data","setInitialValue"],"sources":["C:/Users/Mihail/dev/mesto-react-auth/src/utils/hooks/useFormValidate.js"],"sourcesContent":["import { useCallback, useState } from \"react\";\r\n\r\nexport default function useFormValidate() {\r\n  // Состояние для хранения введенных значений полей формы\r\n  const [formValues, setFormValues] = useState({});\r\n  // Состояние для хранения ошибок валидации полей формы\r\n  const [errors, setErrors] = useState({});\r\n  // Состояние для хранения общей валидности формы\r\n  const [isFormValid, setIsFormValid] = useState(false);\r\n  // Состояние для хранения информации о валидности каждого поля ввода\r\n  const [isInputValid, setIsInputValid] = useState({});\r\n\r\n  //console.log(isFormValid)\r\n\r\n  function handleChange(evt) {\r\n    const { name, value, validationMessage, validity, form } = evt.target;\r\n\r\n    setFormValues((prevFormValues) => ({ ...prevFormValues, [name]: value }));\r\n    setErrors((prevErrors) => ({ ...prevErrors, [name]: validationMessage }));\r\n    setIsInputValid((prevIsInputValid) => ({\r\n      ...prevIsInputValid,\r\n      [name]: validity.valid,\r\n    }));\r\n    setIsFormValid(form.checkValidity());\r\n  }\r\n\r\n  function resetForm(data = {}) {\r\n    setFormValues(data);\r\n    setErrors({});\r\n    setIsFormValid(false);\r\n    setIsInputValid({});\r\n  }\r\n\r\n  const setInitialValue = useCallback((name, value) => {\r\n    setFormValues((prevFormValues) => ({ ...prevFormValues, [name]: value }));\r\n  }, []);\r\n\r\n  return {\r\n    formValues,\r\n    errors,\r\n    isFormValid,\r\n    isInputValid,\r\n    handleChange,\r\n    resetForm,\r\n    setInitialValue,\r\n  };\r\n}\r\n\r\n// import { useCallback, useState } from \"react\"\r\n\r\n// export default function useFormValidate() {\r\n//   // Состояние для хранения введенных значений полей формы\r\n//   const [formValues, setFormValues] = useState({});\r\n//    // Состояние для хранения ошибок валидации полей формы\r\n//   const [errors, setErrors] = useState({});\r\n//      // Состояние для хранения общей валидности формы\r\n//   const [isFormValid, setIsFormValid] = useState(false);\r\n//  // Состояние для хранения информации о валидности каждого поля ввода\r\n//   const [isInputValid, setIsInputValid] = useState({});\r\n\r\n// //console.log(isFormValid)\r\n\r\n//   function handleChange(evt) {\r\n\r\n//     const name = evt.target.name\r\n//     const value = evt.target.value\r\n//     const validationMessage = evt.target.validationMessage\r\n//     const valid = evt.target.validity.valid\r\n//     const form = evt.target.form\r\n\r\n//     setFormValues((formValues) => {\r\n//       return {...formValues, [name]: value}\r\n//     })\r\n\r\n//     setErrors((errors) => {\r\n//       return {...errors, [name]: validationMessage}\r\n//     })\r\n\r\n//     setIsInputValid((isInputValid) => {\r\n//       return {...isInputValid, [name]: valid}\r\n//     })\r\n\r\n//     setIsFormValid(form.checkValidity())\r\n\r\n//     //console.log(valid)\r\n\r\n//   }\r\n\r\n//   function resetForm(data={}) {\r\n//     setFormValues(data)\r\n//     setErrors({})\r\n//     setIsFormValid(false)\r\n//     setIsInputValid({})\r\n\r\n//   }\r\n\r\n//   const setInitialValue = useCallback ((name, value) => {\r\n//     setFormValues((formValues) => {\r\n//       return {...formValues, [name]: value}\r\n//     })\r\n\r\n//   }, [])\r\n\r\n//   return {\r\n//     formValues,\r\n//     errors,\r\n//     isFormValid,\r\n//     isInputValid,\r\n//     handleChange,\r\n//     resetForm,\r\n//     setInitialValue\r\n//   }\r\n\r\n// }\r\n"],"mappings":";AAAA,SAASA,WAAW,EAAEC,QAAQ,QAAQ,OAAO;AAE7C,eAAe,SAASC,eAAeA,CAAA,EAAG;EAAAC,EAAA;EACxC;EACA,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGJ,QAAQ,CAAC,CAAC,CAAC,CAAC;EAChD;EACA,MAAM,CAACK,MAAM,EAAEC,SAAS,CAAC,GAAGN,QAAQ,CAAC,CAAC,CAAC,CAAC;EACxC;EACA,MAAM,CAACO,WAAW,EAAEC,cAAc,CAAC,GAAGR,QAAQ,CAAC,KAAK,CAAC;EACrD;EACA,MAAM,CAACS,YAAY,EAAEC,eAAe,CAAC,GAAGV,QAAQ,CAAC,CAAC,CAAC,CAAC;;EAEpD;;EAEA,SAASW,YAAYA,CAACC,GAAG,EAAE;IACzB,MAAM;MAAEC,IAAI;MAAEC,KAAK;MAAEC,iBAAiB;MAAEC,QAAQ;MAAEC;IAAK,CAAC,GAAGL,GAAG,CAACM,MAAM;IAErEd,aAAa,CAAEe,cAAc,KAAM;MAAE,GAAGA,cAAc;MAAE,CAACN,IAAI,GAAGC;IAAM,CAAC,CAAC,CAAC;IACzER,SAAS,CAAEc,UAAU,KAAM;MAAE,GAAGA,UAAU;MAAE,CAACP,IAAI,GAAGE;IAAkB,CAAC,CAAC,CAAC;IACzEL,eAAe,CAAEW,gBAAgB,KAAM;MACrC,GAAGA,gBAAgB;MACnB,CAACR,IAAI,GAAGG,QAAQ,CAACM;IACnB,CAAC,CAAC,CAAC;IACHd,cAAc,CAACS,IAAI,CAACM,aAAa,CAAC,CAAC,CAAC;EACtC;EAEA,SAASC,SAASA,CAACC,IAAI,GAAG,CAAC,CAAC,EAAE;IAC5BrB,aAAa,CAACqB,IAAI,CAAC;IACnBnB,SAAS,CAAC,CAAC,CAAC,CAAC;IACbE,cAAc,CAAC,KAAK,CAAC;IACrBE,eAAe,CAAC,CAAC,CAAC,CAAC;EACrB;EAEA,MAAMgB,eAAe,GAAG3B,WAAW,CAAC,CAACc,IAAI,EAAEC,KAAK,KAAK;IACnDV,aAAa,CAAEe,cAAc,KAAM;MAAE,GAAGA,cAAc;MAAE,CAACN,IAAI,GAAGC;IAAM,CAAC,CAAC,CAAC;EAC3E,CAAC,EAAE,EAAE,CAAC;EAEN,OAAO;IACLX,UAAU;IACVE,MAAM;IACNE,WAAW;IACXE,YAAY;IACZE,YAAY;IACZa,SAAS;IACTE;EACF,CAAC;AACH;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAAxB,EAAA,CA/GwBD,eAAe"},"metadata":{},"sourceType":"module","externalDependencies":[]}